openapi: 3.0.0
info:
  title: Competency Questions API
  description: An API for storing and managing competency questions.
  version: 1.0.0
paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: jwt
                    description: JWT token for authentication

  /users/logout:
    post:
      summary: Logout the current user
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users:
    summary: Get a list of all users
    responses:
      '200':
        description: A JSON Array of users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /questions:
    get:
      summary: Gets a list of all questions
      responses:
        '200':
          description: A JSON array of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      summary: Creates a new question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '201':
          description: Question created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
  /questions/{questionId}:
    get:
      summary: Gets a question by ID
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    put:
      summary: Updates a question by ID
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    delete:
      summary: Deletes a question by ID
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Question deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    Question:
      type: object
      required:
        - id
        - text
      properties:
        id:
          type: string
          description: The unique identifier for the question
        text:
          type: string
          description: The text of the question
        createdAt:
          type: string
          format: date-time
          description: The date and time when the question was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the question was last updated
    User:
      type: object
      required:
        - email
        - password
        - fullName
      properties:
        id:
          type: string
          description: The unique identifier for the user
        fullName:
          type: string
          description: Full name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: Password for the user account
        createdAt:
          type: string
          format: date-time
          description: The date and time when the account was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the account was last updated
